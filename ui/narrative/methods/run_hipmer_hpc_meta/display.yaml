#
# define display information
#
name: Assemble Metagenomic Reads with MetaHipMer - v2.1.0.1-357
tooltip: |
    Assemble metagenomic reads using the MetaHipMer assembly pipeline.
screenshots: []

icon: hipmer-blue.png

#
# define a set of similar methods that might be useful to the user
#
suggestions:
    apps:
        related:
            []
        next:
            []
    methods:
        related:
            []
        next:
            [annotate_contigset]

#
# Configure the display and description of parameters
#
parameters :
    reads :
        ui-name : Read Library
        short-hint : Read library (only PairedEnd Libs supported now)
    output_contigset_name:
        ui-name : Output ContigSet name
        short-hint : Enter a name for the assembled contigs data object
    mer_sizes:
        ui-name : k-mer sizes
        short-hint : |
            k-mer sizes to use in the assembly process.  This is a
            comma separated list of integers to use as mer sizes.  For
            metagenomes you may want to use 21,33,55,77,99.
    scaff_mer_lens:
        ui-name : scaff k-mer sizes
        short-hint : |
            scaffold k-mer sizes to use in the assembly process.  This is a
            comma separated list of integers to use as mer sizes.  For
            metagenomes you may want to use 99,33.
    assembly_size_filter:
        ui-name : filter small contigs from MetaHipMer assembly
        short-hint : |
            In cases where MetaHipMer is assembling a large-sized input read set with a relatively high |
            level of complexity, MetaHipMer produces many very small size contigs. This parameter allows |
            a user to filter short length contigs from their assembly. (default 2000bp)
    usedebug:
        ui-name : debug queue for small jobs (30min limit)
        short-hint : |
            use debug queue for testing or jobs < 30 min (not recomended)

description : |
    <p>KBase wrapper for the MetaHipMer Assembler (v2.1.0.1-357).</p>
    <p>MetaHipMer is a high performance parallelization and port of Meraculous ( http://jgi.doe.gov/data-and-tools/meraculous/ ).
       Version 2 (MHM2) is written entirely in UPC++ and CUDA, and runs efficiently on both single servers and on multinode supercomputers, where it can scale up to coassemble terabase-sized metagenomes.</p>
    <p>For more details see: https://bitbucket.org/berkeleylab/mhm2/wiki/Home.md</p>
    <p>This project is a joint collaboration between UC Berkeley ( http://www.eecs.berkeley.edu ),
    JGI ( http://jgi.doe.gov ), and CRD ( http://crd.lbl.gov/ )</p>

    <p>Primary authors are: Evangelos Georganas, Aydin Buluc, Steven Hofmeyr, Leonid Oliker and
    Rob Egan, with direction and advice from Kathy Yelick. The original Meraculous was developed by
    Jarrod Chapman, Isaac Ho, Eugene Goltsman, and Daniel Rokhsar.</p>

publications :
    -
        display-text : |
            Georganas, Evangelos, et al. "HipMer: an extreme-scale de novo genome assembler." Proceedings of |
            the International Conference for High Performance Computing, Networking, Storage and Analysis. ACM, 2015.
    -
        display-text : |
            J. A. Chapman, I. Ho, S. Sunkara, S. Luo, G. P. Schroth, and D. S. Rokhsar, "Meraculous: De novo |
            genome assembly with short paired-end reads," PLoS ONE, vol. 6, no. 8, p. e23501, 08 2011.
